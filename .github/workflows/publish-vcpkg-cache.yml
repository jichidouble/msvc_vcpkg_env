# .github/workflows/publish-vcpkg-cache.yml
name: Publish vcpkg Binary Cache

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    timeout-minutes: 360
    runs-on: windows-latest

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download existing cache (if any)
        run: |
          gh release download vcpkg-cache \
            --repo "${{ github.repository }}" \
            --pattern vcpkg-cache.zip \
            --clobber
        shell: bash
        continue-on-error: true

      - name: Extract previous cache
        shell: powershell
        run: |
          if (Test-Path vcpkg-cache.zip) {
            mkdir prev-cache
            Expand-Archive vcpkg-cache.zip -DestinationPath prev-cache -Force
          }

      - name: Setup MSVC v142 (VS2019)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2

      - name: Clone & bootstrap vcpkg@2024.12.16
        run: |
          git clone --branch 2024.12.16 https://github.com/microsoft/vcpkg.git vcpkg
          cd vcpkg
          .\bootstrap-vcpkg.bat -DisableMetrics

      - name: Inject previous cache
        shell: cmd
        run: |
          if exist prev-cache\installed  ( robocopy prev-cache\installed  vcpkg\installed  /E /NJH /NJS || exit /b 0 )
          if exist prev-cache\packages ( robocopy prev-cache\packages   vcpkg\packages   /E /NJH /NJS || exit /b 0 )
          if exist prev-cache\buildtrees ( robocopy prev-cache\buildtrees vcpkg\buildtrees /E /NJH /NJS || exit /b 0 )
          if exist prev-cache\downloads ( robocopy prev-cache\downloads  vcpkg\downloads  /E /NJH /NJS || exit /b 0 )

      - name: Install all dependencies via manifest (incremental)
        # 切到 cmd，让 --x-install-root 语法正常
        shell: cmd
        run: |
          cd vcpkg
          .\vcpkg.exe install --x-install-root=installed --triplet x64-windows --recurse

      - name: Package vcpkg binary cache
        shell: powershell
        run: |
          # 切到 vcpkg 目录，那里才有 installed/, packages/ 等
          Set-Location vcpkg
          # 目标 zip 放回到工作区根
          $zip = Join-Path $env:GITHUB_WORKSPACE "vcpkg-cache.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          # 打包四大目录
          Compress-Archive -Path installed,packages,buildtrees,downloads -DestinationPath $zip
          # （可选）切回根目录
          Pop-Location

      - name: Package vcpkg binary cache
        shell: bash
        run: |
          cd vcpkg
          # 如果之前有旧包，先删掉
          rm -f ../vcpkg-cache.zip
          # 用 tar -a 创建 ZIP（流式写入，不会把整个包读到内存）
          tar -a -c -f ../vcpkg-cache.zip installed packages buildtrees downloads

      - name: Create or update GitHub Release & upload cache
        uses: softprops/action-gh-release@v1
        with:
          tag_name: vcpkg-cache
          files: vcpkg-cache.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
